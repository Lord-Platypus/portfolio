// Mocks generated by Mockito 5.4.6 from annotations
// in portfolio/test/portfolio/usecases/get_personal_info_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:portfolio/core/resources/data_state.dart' as _i2;
import 'package:portfolio/features/portfolio/domain/entities/education_element.dart'
    as _i8;
import 'package:portfolio/features/portfolio/domain/entities/personal_info.dart'
    as _i5;
import 'package:portfolio/features/portfolio/domain/entities/technology_skill_group.dart'
    as _i6;
import 'package:portfolio/features/portfolio/domain/entities/work_experience.dart'
    as _i7;
import 'package:portfolio/features/portfolio/domain/repositories/portfolio_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PortfolioRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPortfolioRepository extends _i1.Mock
    implements _i3.PortfolioRepository {
  MockPortfolioRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<_i5.PersonalInfoEntity>> getPersonalInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getPersonalInfo, []),
            returnValue:
                _i4.Future<_i2.DataState<_i5.PersonalInfoEntity>>.value(
                  _FakeDataState_0<_i5.PersonalInfoEntity>(
                    this,
                    Invocation.method(#getPersonalInfo, []),
                  ),
                ),
          )
          as _i4.Future<_i2.DataState<_i5.PersonalInfoEntity>>);

  @override
  _i4.Future<_i2.DataState<List<_i6.TechnologySkillGroupEntity>>>
  getTechnologySkills() =>
      (super.noSuchMethod(
            Invocation.method(#getTechnologySkills, []),
            returnValue:
                _i4.Future<
                  _i2.DataState<List<_i6.TechnologySkillGroupEntity>>
                >.value(
                  _FakeDataState_0<List<_i6.TechnologySkillGroupEntity>>(
                    this,
                    Invocation.method(#getTechnologySkills, []),
                  ),
                ),
          )
          as _i4.Future<_i2.DataState<List<_i6.TechnologySkillGroupEntity>>>);

  @override
  _i4.Future<_i2.DataState<List<_i7.WorkExperienceEntity>>>
  getWorkExperiences() =>
      (super.noSuchMethod(
            Invocation.method(#getWorkExperiences, []),
            returnValue:
                _i4.Future<_i2.DataState<List<_i7.WorkExperienceEntity>>>.value(
                  _FakeDataState_0<List<_i7.WorkExperienceEntity>>(
                    this,
                    Invocation.method(#getWorkExperiences, []),
                  ),
                ),
          )
          as _i4.Future<_i2.DataState<List<_i7.WorkExperienceEntity>>>);

  @override
  _i4.Future<_i2.DataState<List<_i8.EducationElementEntity>>>
  getEducationElements() =>
      (super.noSuchMethod(
            Invocation.method(#getEducationElements, []),
            returnValue:
                _i4.Future<
                  _i2.DataState<List<_i8.EducationElementEntity>>
                >.value(
                  _FakeDataState_0<List<_i8.EducationElementEntity>>(
                    this,
                    Invocation.method(#getEducationElements, []),
                  ),
                ),
          )
          as _i4.Future<_i2.DataState<List<_i8.EducationElementEntity>>>);
}
